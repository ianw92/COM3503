/* I declare that this code is my own work */
/* I based it on 'fs_tt_05.txt' provided by Dr Steve Maddock in eSheet6/Week6_3_scene_graph/
   and adapted it for my own use.
   I have updated it to include point lights and spot lights */
/* Author: Ian Williams, Email: iwilliams3@sheffield.ac.uk */

#version 330 core

in vec3 fragPos;
in vec3 ourNormal;
in vec2 ourTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;
uniform vec3 viewPos;

struct PointLight {
  vec3 position;

  float constant;
  float linear;
  float quadratic;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};
#define NR_POINT_LIGHTS 6
uniform PointLight pointLights[NR_POINT_LIGHTS];
vec3 calcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

struct SpotLight {
  vec3 position;
  vec3 direction;
  float cutOff;
  float outerCutOff;

  float constant;
  float linear;
  float quadratic;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform SpotLight spotLight;
vec3 calcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

struct Material {
  sampler2D diffuse;
  sampler2D specular;
  float shininess;
};

uniform Material material;

vec3 calcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir) {
  vec3 lightDir = normalize(light.position - fragPos);
  // diffuse shading
  float diff = max(dot(normal, lightDir), 0.0);
  // specular shading
  vec3 reflectDir = reflect(-lightDir, normal);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  // attenuation
  float distance    = length(light.position - fragPos);
  float attenuation = 1.0 / (light.constant + light.linear * distance +
              light.quadratic * (distance * distance));
  // combine results
  vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, ourTexCoord));
  vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, ourTexCoord));
  vec3 specular = light.specular * spec * vec3(texture(material.specular, ourTexCoord));
  ambient  *= attenuation;
  diffuse  *= attenuation;
  specular *= attenuation;
  return (ambient + diffuse + specular);
}

vec3 calcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir) {
  vec3 lightDir = normalize(light.position - fragPos);
  float theta = dot(lightDir, normalize(-light.direction));
  float epsilon = (light.cutOff - light.outerCutOff);
  vec3 result = vec3(0,0,0);

  if(theta > light.outerCutOff) {
    // do lighting calculations
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    // intensity
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

    // attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance +
                light.quadratic * (distance * distance));
    // combine results
    vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, ourTexCoord));
    vec3 diffuse  = light.diffuse  * diff * intensity * vec3(texture(material.diffuse, ourTexCoord));
    vec3 specular = light.specular * spec * intensity * vec3(texture(material.specular, ourTexCoord));
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    result = ambient + diffuse + specular;
  }

  return result;
}

void main() {
  // properties
  vec3 norm = normalize(ourNormal);
  vec3 viewDir = normalize(viewPos - fragPos);
  vec3 result = vec3(0,0,0);

  for(int i = 0; i < NR_POINT_LIGHTS; i++)
      result += calcPointLight(pointLights[i], norm, fragPos, viewDir);

  result += calcSpotLight(spotLight, norm, fragPos, viewDir);

  fragColor = vec4(result, 1.0);
}
